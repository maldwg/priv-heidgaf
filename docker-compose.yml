services:

  lc:
    build:
      context: .
      dockerfile: docker_files/Dockerfile.lc
      network: host
    restart: "unless-stopped"
    depends_on:
      - zookeeper
      - kafka1
      - kafka2
      - kafka3
    networks:
      heidgaf:
        ipv4_address: 172.27.0.7
    memswap_limit: 768m
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 512m
        reservations:
          cpus: '1'
          memory: 256m

  ls:
    build:
      context: .
      dockerfile: docker_files/Dockerfile.ls
      network: host
    restart: "unless-stopped"
    depends_on:
      - zookeeper
      - kafka1
      - kafka2
      - kafka3
    networks:
      heidgaf:
        ipv4_address: 172.27.0.8
    memswap_limit: 768m
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 512m
        reservations:
          cpus: '1'
          memory: 256m


  insp:
    build:
      context: .
      dockerfile: docker_files/Dockerfile.insp
      network: host
    restart: "unless-stopped"
    depends_on:
      - zookeeper
      - kafka1
      - kafka2
      - kafka3
    networks:
      heidgaf:
        ipv4_address: 172.27.0.6
    deploy:
      mode: "replicated"
      replicas: 1
      resources:
        limits:
          cpus: '2'
          memory: 512m
        reservations:
          cpus: '1'
          memory: 256m

  # dtc:
  #   build:
  #     context: ./docker_files
  #     dockerfile: Dockerfile.dtc
  #   deploy:
  #     mode: "replicated"
  #     replicas: 6

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    networks:
      heidgaf:
        ipv4_address: 172.27.0.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka1
    restart: "unless-stopped"
    networks:
      heidgaf:
        ipv4_address: 172.27.0.3
    ports:
      - "8097:8097"
      - "29092:29092"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka1:8097", "--list"]
      interval: 30s
      timeout: 10s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://172.27.0.3:8097,DOCKER://host.docker.internal:29092
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"


  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka2
    restart: "unless-stopped"
    networks:
      heidgaf:
        ipv4_address: 172.27.0.4
    ports:
      - "8098:8098"
      - "29093:29093"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka2:8098", "--list"]
      interval: 30s
      timeout: 10s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19092,EXTERNAL://172.27.0.4:8098,DOCKER://host.docker.internal:29093
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka3
    restart: "unless-stopped"
    networks:
      heidgaf:
        ipv4_address: 172.27.0.5
    ports:
      - "8099:8099"
      - "29094:29094"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka3:8099", "--list"]
      interval: 30s
      timeout: 10s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19092,EXTERNAL://172.27.0.5:8099,DOCKER://host.docker.internal:29094
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

networks:
  heidgaf:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.27.0.0/16
          gateway: 172.27.0.1
