Timestamps for ``KafkaBatchSender``
===================================

The ``KafkaBatchSender`` in ``batch_handler.py`` stores
two lists of messages: ``earlier_messages`` and
``latest_messages``. The process for 4 example messages with
a batch size of 2 is as follows:

1.  In the first call of ``add_message()``, ``_reset_timer()``
    is called for the first time. In ``add_message()``, the
    ``begin_timestamp`` is set to now.

2.  When ``message_1`` comes in, it is added to the
    ``latest_messages`` as well as the next ``message_2``.
    Now the batch is full and has to be sent to the
    ``KafkaProduceHandler`` to be produced. Before this is
    done, the ``end_timestamp`` is set to now.

    Now the ``latest_messages`` are sent with the
    ``begin_timestamp`` and the ``end_timestamp``. Now, a
    third message ``message_3`` comes in.

Variant 1: Buffer is used (standard case for
``LogCollector``):

3.  The old messages ``message_1`` and ``message_2`` are
    moved to the ``earlier_messages`` (the buffer). That
    means, our ``begin_timestamp`` stays the same and
    still marks the beginning before ``message_1``. However,
    the former ``end_timestamp`` now marks the beginning of
    the next batch, starting right after sending the first
    one. Therefore, a third timestamp ``center_timestamp``
    is set to ``end_timestamp``, and new messages belong to
    this new timespan. ``message_3`` is put into
    ``latest_messages`` along with the next ``message_4``
    and ``message_5``.

4.  Now the next batch is full, and as earlier, the
    ``latest_messages`` are sent with the ``begin_timestamp``
    and the ``end_timestamp`` (note, that
    ``begin_timestamp`` still is the same as the before).
    Since we do not need the old ``begin_timestamp`` after
    sending all the messages in its timespan, we can now set
    ``begin_timestamp`` to ``center_timestamp`` (which
    marked the timestamp before ``message_3`` was added).
    ``center_timestamp`` is set to ``end_timestamp`` and
    ``end_timestamp`` is set to ``None``. ``message_5`` is
    put into ``latest_messages``.

    If no messages come in throughout the timer runtime, the
    case is the same.

Variant 2: Buffer is not used:

3.  The old messages ``message_1`` and ``message_2`` are
    deleted. ``message_3`` is put into ``latest_messages``
    and the ``begin_timestamp`` is set to ``end_timestamp``.
